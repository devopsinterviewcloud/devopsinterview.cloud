// Prisma schema for DevOpsInterview.Cloud
// Database schema for ebook store with orders, customers, and downloads

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication and customer management
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  orders        Order[]
  downloads     Download[]
  accounts      Account[]
  sessions      Session[]

  @@index([email])
  @@map("users")
}

// NextAuth Account model
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

// NextAuth Session model
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

// NextAuth Verification Token model
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Ebook product model
model Ebook {
  id            String   @id @default(cuid())
  slug          String   @unique
  title         String
  description   String   @db.Text
  price         Decimal  @db.Decimal(10, 2)
  originalPrice Decimal? @db.Decimal(10, 2)
  coverUrl      String
  fileUrl       String?  // Secure download URL or storage reference
  format        String[] // ["PDF", "EPUB", "MOBI"]
  pageCount     Int
  fileSize      String
  category      String
  tags          String[]
  isFeatured    Boolean  @default(false)
  isActive      Boolean  @default(true)

  // SEO fields
  metaTitle       String?
  metaDescription String?

  // Analytics
  viewCount     Int @default(0)
  downloadCount Int @default(0)
  salesCount    Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orderItems OrderItem[]
  downloads  Download[]
  reviews    Review[]

  @@index([slug])
  @@index([category])
  @@index([isFeatured])
  @@index([isActive])
  @@map("ebooks")
}

// Order model for purchases
model Order {
  id                String      @id @default(cuid())
  orderNumber       String      @unique @default(cuid())

  // Customer information
  userId            String?
  customerEmail     String
  customerName      String?

  // Payment information
  stripeSessionId   String?     @unique
  stripePaymentId   String?     @unique
  paymentStatus     PaymentStatus @default(PENDING)
  paymentMethod     String?

  // Order details
  subtotal          Decimal     @db.Decimal(10, 2)
  tax               Decimal     @db.Decimal(10, 2) @default(0)
  total             Decimal     @db.Decimal(10, 2)
  currency          String      @default("USD")

  // Fulfillment
  status            OrderStatus @default(PENDING)
  fulfilledAt       DateTime?

  // Metadata
  ipAddress         String?
  userAgent         String?

  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  user              User?       @relation(fields: [userId], references: [id])
  orderItems        OrderItem[]
  downloads         Download[]

  @@index([userId])
  @@index([customerEmail])
  @@index([orderNumber])
  @@index([stripeSessionId])
  @@index([paymentStatus])
  @@index([createdAt])
  @@map("orders")
}

// Order items (ebooks in an order)
model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  ebookId   String

  // Snapshot of ebook details at time of purchase
  title     String
  price     Decimal  @db.Decimal(10, 2)
  format    String[]

  quantity  Int      @default(1)

  createdAt DateTime @default(now())

  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  ebook     Ebook    @relation(fields: [ebookId], references: [id])

  @@index([orderId])
  @@index([ebookId])
  @@map("order_items")
}

// Download tracking for purchased ebooks
model Download {
  id          String   @id @default(cuid())
  userId      String?
  orderId     String
  ebookId     String

  format      String   // PDF, EPUB, MOBI
  ipAddress   String?
  userAgent   String?

  downloadedAt DateTime @default(now())

  user        User?    @relation(fields: [userId], references: [id])
  order       Order    @relation(fields: [orderId], references: [id])
  ebook       Ebook    @relation(fields: [ebookId], references: [id])

  @@index([userId])
  @@index([orderId])
  @@index([ebookId])
  @@index([downloadedAt])
  @@map("downloads")
}

// Review model for ebook ratings and reviews
model Review {
  id        String   @id @default(cuid())
  ebookId   String
  userId    String?

  rating    Int      // 1-5 stars
  title     String?
  comment   String?  @db.Text

  // Metadata
  isVerifiedPurchase Boolean @default(false)
  isPublished        Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ebook     Ebook    @relation(fields: [ebookId], references: [id], onDelete: Cascade)

  @@index([ebookId])
  @@index([rating])
  @@index([isPublished])
  @@map("reviews")
}

// Newsletter subscribers
model Subscriber {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  source    String?  // Where they subscribed from

  isActive  Boolean  @default(true)

  subscribedAt   DateTime @default(now())
  unsubscribedAt DateTime?

  @@index([email])
  @@index([isActive])
  @@map("subscribers")
}

// Security audit log
model AuditLog {
  id          String   @id @default(cuid())

  eventType   String   // login, download, purchase, etc.
  userId      String?
  email       String?
  ipAddress   String?
  userAgent   String?

  metadata    Json?    // Additional event data
  severity    String   // low, medium, high, critical

  createdAt   DateTime @default(now())

  @@index([eventType])
  @@index([userId])
  @@index([severity])
  @@index([createdAt])
  @@map("audit_logs")
}

// Enums
enum PaymentStatus {
  PENDING
  PROCESSING
  SUCCEEDED
  FAILED
  REFUNDED
  CANCELLED
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
}
